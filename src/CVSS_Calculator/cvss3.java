/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package CVSS_Calculator;

import burp.BurpExtender;
import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.text.DecimalFormat;
import javax.swing.BorderFactory;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JTable;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author moein
 */
public class cvss3 extends javax.swing.JPanel {

    /**
     * Creates new form test
     */
    public cvss3() {
        initComponents();
        initialize();
    }
    
    private void initialize() {
        makeInvisible();
        clearTables();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        CVSS3_Panel = new javax.swing.JPanel();
        checkbox_baseScore = new javax.swing.JCheckBox();
        BasePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        combobox_base_attackVector = new javax.swing.JComboBox<>();
        combobox_base_attackComplexity = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        combobox_base_privilagesRequired = new javax.swing.JComboBox<>();
        combobox_base_integrityImpact = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        combobox_base_availabilityImpact = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        combobox_base_confImpact = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        combobox_base_userInteraction = new javax.swing.JComboBox<>();
        jLabel19 = new javax.swing.JLabel();
        combobox_base_scope = new javax.swing.JComboBox<>();
        checkbox_TemporalScore = new javax.swing.JCheckBox();
        TemporalPanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        combobox_temporal_exploitability = new javax.swing.JComboBox<>();
        combobox_temporal_remediationLevel = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        combobox_temporal_reportConfidence = new javax.swing.JComboBox<>();
        checkbox_EnvironmentalScore = new javax.swing.JCheckBox();
        EnvironmentalPanel = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        combobox_env_availabilityImpact = new javax.swing.JComboBox<>();
        jLabel21 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        combobox_env_attackComplexity = new javax.swing.JComboBox<>();
        jLabel27 = new javax.swing.JLabel();
        combobox_env_scope = new javax.swing.JComboBox<>();
        jLabel22 = new javax.swing.JLabel();
        combobox_env_confImpact = new javax.swing.JComboBox<>();
        combobox_env_userInteraction = new javax.swing.JComboBox<>();
        combobox_env_PrivilagesRequired = new javax.swing.JComboBox<>();
        jLabel24 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        combobox_env_attackVector = new javax.swing.JComboBox<>();
        combobox_env_integrityImpact = new javax.swing.JComboBox<>();
        jLabel25 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        combobox_env_confReq = new javax.swing.JComboBox<>();
        jLabel32 = new javax.swing.JLabel();
        combobox_env_integReq = new javax.swing.JComboBox<>();
        jLabel33 = new javax.swing.JLabel();
        combobox_env_availReq = new javax.swing.JComboBox<>();
        scorePanel = new javax.swing.JPanel();
        jLabel30 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        scoreTable = new javax.swing.JTable() {
            public Component prepareRenderer(TableCellRenderer renderer, int row, int column) {
                Component c = super.prepareRenderer(renderer, row, column);
                try{
                    String score =  scoreTable.getModel().getValueAt(row, column ).toString();
                    if(score.length()>0){
                        double sc=removeSeverityFromScore(score);
                        c.setBackground(getColor(sc));
                        if(sc>=7){  //High and critical =>font color: White
                            c.setForeground(Color.WHITE);
                        }
                        else{   //None, Low and Medium =>font color: Black
                            c.setForeground(Color.BLACK);
                        }
                        if(column==3){      //add border to Overall score
                            JComponent jc = (JComponent)c;
                            if(sc>=7){
                                jc.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.WHITE));
                            }
                            else{
                                jc.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.BLACK));
                            }
                            c.setFont(mainPanel.getFont_mainTitle());
                            //c.setFont(new Font(font, Font.BOLD + Font.ITALIC,15));
                        }
                        updateSeverities();
                    }
                    else{
                        c.setBackground(Color.WHITE);
                    }
                }
                catch(Exception e){
                    burp.BurpExtender.output.println("V2_ScoreTable: Error Occured!");
                }
                return c;
            }

        };
        jScrollPane7 = new javax.swing.JScrollPane();
        envScoreTable = new javax.swing.JTable() {
            public Component prepareRenderer(TableCellRenderer renderer, int row, int column) {
                Component c = super.prepareRenderer(renderer, row, column);
                try{
                    String score =  envScoreTable.getModel().getValueAt(row, column ).toString();
                    if(score.length()>0){
                        double sc=removeSeverityFromScore(score);
                        c.setBackground(getColor(sc));
                        if(sc>=7){  //High and critical =>font color: White
                            c.setForeground(Color.WHITE);
                        }
                        else{   //None, Low and Medium =>font color: Black
                            c.setForeground(Color.BLACK);
                        }
                    }
                    else{
                        c.setBackground(Color.WHITE);
                    }
                }
                catch(Exception e){
                    burp.BurpExtender.output.println("V2_EnvScore: Error Occured!");
                }
                return c;
            }
        };
        jLabel12 = new javax.swing.JLabel();
        nvdSiteButton1 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        baseScoreTable = new javax.swing.JTable() {
            public Component prepareRenderer(TableCellRenderer renderer, int row, int column) {
                Component c = super.prepareRenderer(renderer, row, column);
                try{
                    String score =  baseScoreTable.getModel().getValueAt(row, column ).toString();
                    if(score.length()>0){
                        double sc=removeSeverityFromScore(score);
                        c.setBackground(getColor(sc));
                        if(sc>=7){  //High and critical =>font color: White
                            c.setForeground(Color.WHITE);
                        }
                        else{   //None, Low and Medium =>font color: Black
                            c.setForeground(Color.BLACK);
                        }
                    }
                    else{
                        c.setBackground(Color.WHITE);
                    }
                }
                catch(Exception e){
                    burp.BurpExtender.output.println("V2_BaseScore: Error Occured!");
                }
                return c;
            }
        };
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        Vector_textField = new javax.swing.JTextField();
        copyButton = new javax.swing.JButton();
        nvdSiteButton = new javax.swing.JButton();

        checkbox_baseScore.setFont(mainPanel.getFont_mainTitle());
        checkbox_baseScore.setSelected(true);
        checkbox_baseScore.setText("Base Score Metrics");
        checkbox_baseScore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkbox_baseScoreActionPerformed(evt);
            }
        });

        jLabel1.setFont(mainPanel.getFont_secondTitle());
        jLabel1.setText("Attack Vector (AV)");

        combobox_base_attackVector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Network (AV:N)", "Adjacent Network (AV:A)", "Local (AV:L)", "Physical (AV:P)" }));
        combobox_base_attackVector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_base_attackVectorActionPerformed(evt);
            }
        });

        combobox_base_attackComplexity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Low (AC:L)", "High (AC:H)" }));
        combobox_base_attackComplexity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_base_attackComplexityActionPerformed(evt);
            }
        });

        jLabel2.setFont(mainPanel.getFont_secondTitle());
        jLabel2.setText("Attack Complexity (AC)");

        jLabel3.setFont(mainPanel.getFont_secondTitle());
        jLabel3.setText("Privileges Required (PR)");

        combobox_base_privilagesRequired.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None (PR:N)", "Low (PR:L)", "High (PR:H)" }));
        combobox_base_privilagesRequired.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_base_privilagesRequiredActionPerformed(evt);
            }
        });

        combobox_base_integrityImpact.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None (I:N)", "Low (I:L)", "High (I:H)" }));
        combobox_base_integrityImpact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_base_integrityImpactActionPerformed(evt);
            }
        });

        jLabel4.setFont(mainPanel.getFont_secondTitle());
        jLabel4.setText("Integrity Impact (I)");

        jLabel5.setFont(mainPanel.getFont_secondTitle());
        jLabel5.setText("Availability Impact (A)");

        combobox_base_availabilityImpact.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None (A:N)", "Low (A:L)", "High (A:H)" }));
        combobox_base_availabilityImpact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_base_availabilityImpactActionPerformed(evt);
            }
        });

        jLabel6.setFont(mainPanel.getFont_secondTitle());
        jLabel6.setText("Confidentiality Impact (C)");

        combobox_base_confImpact.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None (C:N)", "Low (C:L)", "High (C:H)" }));
        combobox_base_confImpact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_base_confImpactActionPerformed(evt);
            }
        });

        jLabel9.setFont(mainPanel.getFont_secondTitle());
        jLabel9.setText("User Interaction (UI)");

        combobox_base_userInteraction.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None (UI:N)", "Required (UI:R)" }));
        combobox_base_userInteraction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_base_userInteractionActionPerformed(evt);
            }
        });

        jLabel19.setFont(mainPanel.getFont_secondTitle());
        jLabel19.setText("Scope (S)");

        combobox_base_scope.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Unchanged (S:U)", "Changed (S:C)" }));
        combobox_base_scope.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_base_scopeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout BasePanelLayout = new javax.swing.GroupLayout(BasePanel);
        BasePanel.setLayout(BasePanelLayout);
        BasePanelLayout.setHorizontalGroup(
            BasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BasePanelLayout.createSequentialGroup()
                .addGroup(BasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(combobox_base_attackVector, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(combobox_base_scope, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BasePanelLayout.createSequentialGroup()
                        .addGroup(BasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(combobox_base_confImpact, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(BasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(combobox_base_integrityImpact, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(BasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(combobox_base_availabilityImpact, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(BasePanelLayout.createSequentialGroup()
                        .addGroup(BasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(combobox_base_attackComplexity, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(BasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(combobox_base_privilagesRequired, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(BasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(combobox_base_userInteraction, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))))
        );
        BasePanelLayout.setVerticalGroup(
            BasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BasePanelLayout.createSequentialGroup()
                .addGroup(BasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(BasePanelLayout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(combobox_base_privilagesRequired, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(BasePanelLayout.createSequentialGroup()
                            .addGroup(BasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2))
                            .addGap(0, 0, 0)
                            .addGroup(BasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(combobox_base_attackVector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(combobox_base_attackComplexity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(BasePanelLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combobox_base_userInteraction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(BasePanelLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(0, 0, 0)
                        .addComponent(combobox_base_availabilityImpact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(BasePanelLayout.createSequentialGroup()
                        .addGroup(BasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel4))
                        .addGap(0, 0, 0)
                        .addGroup(BasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(combobox_base_confImpact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(combobox_base_integrityImpact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, BasePanelLayout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addGap(0, 0, 0)
                        .addComponent(combobox_base_scope, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        checkbox_TemporalScore.setFont(mainPanel.getFont_mainTitle());
        checkbox_TemporalScore.setText("Temporal Score Metrics");
        checkbox_TemporalScore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkbox_TemporalScoreActionPerformed(evt);
            }
        });

        jLabel7.setFont(mainPanel.getFont_secondTitle());
        jLabel7.setText("Exploitability (E)");

        combobox_temporal_exploitability.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        combobox_temporal_exploitability.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Not Defined (E:X)", "Unproven that exploit exists (E:U)", "Proof of concept code (E:P)", "Functional exploit exists (E:F)", "High (E:H)" }));
        combobox_temporal_exploitability.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_temporal_exploitabilityActionPerformed(evt);
            }
        });

        combobox_temporal_remediationLevel.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Not Defined (RL:X)", "Official fix (RL:O)", "Temporary fix (RL:T)", "Workaround (RL:W)", "Unavailable (RL:U)" }));
        combobox_temporal_remediationLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_temporal_remediationLevelActionPerformed(evt);
            }
        });

        jLabel8.setFont(mainPanel.getFont_secondTitle());
        jLabel8.setText(" Remediation Level (RL)");

        jLabel10.setFont(mainPanel.getFont_secondTitle());
        jLabel10.setText("Report Confidence (RC)");

        combobox_temporal_reportConfidence.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Not Defined (RC:X)", "Unknown (RC:U)", "Reasonable (RC:R)", "Confirmed (RC:C)" }));
        combobox_temporal_reportConfidence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_temporal_reportConfidenceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout TemporalPanelLayout = new javax.swing.GroupLayout(TemporalPanel);
        TemporalPanel.setLayout(TemporalPanelLayout);
        TemporalPanelLayout.setHorizontalGroup(
            TemporalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TemporalPanelLayout.createSequentialGroup()
                .addGroup(TemporalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(combobox_temporal_exploitability, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TemporalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(combobox_temporal_remediationLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TemporalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(combobox_temporal_reportConfidence, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        TemporalPanelLayout.setVerticalGroup(
            TemporalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TemporalPanelLayout.createSequentialGroup()
                .addComponent(jLabel10)
                .addGap(0, 0, 0)
                .addComponent(combobox_temporal_reportConfidence, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TemporalPanelLayout.createSequentialGroup()
                .addGroup(TemporalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addGap(0, 0, 0)
                .addGroup(TemporalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combobox_temporal_exploitability, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combobox_temporal_remediationLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        checkbox_EnvironmentalScore.setFont(mainPanel.getFont_mainTitle());
        checkbox_EnvironmentalScore.setText("Environmental Score Metrics");
        checkbox_EnvironmentalScore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkbox_EnvironmentalScoreActionPerformed(evt);
            }
        });

        jLabel23.setFont(mainPanel.getFont_secondTitle());
        jLabel23.setText("User Interaction (UI)");

        combobox_env_availabilityImpact.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Not Defined (MA:X)", "None (MA:N)", "Low (MA:L)", "High (MA:H)" }));
        combobox_env_availabilityImpact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_env_availabilityImpactActionPerformed(evt);
            }
        });

        jLabel21.setFont(mainPanel.getFont_secondTitle());
        jLabel21.setText("Integrity Impact (I)");

        jLabel20.setFont(mainPanel.getFont_secondTitle());
        jLabel20.setText("Privileges Required (PR)");

        combobox_env_attackComplexity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Not Defined (MAC:X)", "Low (MAC:L)", "High (MAC:H)" }));
        combobox_env_attackComplexity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_env_attackComplexityActionPerformed(evt);
            }
        });

        jLabel27.setFont(mainPanel.getFont_secondTitle());
        jLabel27.setText("Attack Complexity (AC)");

        combobox_env_scope.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Not Defined (MS:X)", "Unchanged (MS:U)", "Changed (MS:C)" }));
        combobox_env_scope.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_env_scopeActionPerformed(evt);
            }
        });

        jLabel22.setFont(mainPanel.getFont_secondTitle());
        jLabel22.setText("Availability Impact (A)");

        combobox_env_confImpact.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Not Defined (MC:X)", "None (MC:N)", "Low (MC:L)", "High (MC:H)" }));
        combobox_env_confImpact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_env_confImpactActionPerformed(evt);
            }
        });

        combobox_env_userInteraction.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Not Defined (MUI:X)", "None (MUI:N)", "Required (MUI:R)" }));
        combobox_env_userInteraction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_env_userInteractionActionPerformed(evt);
            }
        });

        combobox_env_PrivilagesRequired.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Not Defined (MPR:X)", "None (MPR:N)", "Low (MPR:L)", "High (MPR:H)" }));
        combobox_env_PrivilagesRequired.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_env_PrivilagesRequiredActionPerformed(evt);
            }
        });

        jLabel24.setFont(mainPanel.getFont_secondTitle());
        jLabel24.setText("Confidentiality Impact (C)");

        jLabel26.setFont(mainPanel.getFont_secondTitle());
        jLabel26.setText("Scope (S)");

        combobox_env_attackVector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Not Defined (MAV:X)", "Network (MAV:N)", "Adjacent Network (MAV:A)", "Local (MAV:L)", "Physical (MAV:P)" }));
        combobox_env_attackVector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_env_attackVectorActionPerformed(evt);
            }
        });

        combobox_env_integrityImpact.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Not Defined (MI:X)", "None (MI:N)", "Low (MI:L)", "High (MI:H)" }));
        combobox_env_integrityImpact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_env_integrityImpactActionPerformed(evt);
            }
        });

        jLabel25.setFont(mainPanel.getFont_secondTitle());
        jLabel25.setText("Attack Vector (AV)");

        jLabel28.setFont(mainPanel.getFont_secondTitle());
        jLabel28.setText("Confidentiality Requirement (CR)");

        combobox_env_confReq.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Not Defined (CR:X)", "Low (CR:L)", "Medium (CR:M)", "High (CR:H)" }));
        combobox_env_confReq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_env_confReqActionPerformed(evt);
            }
        });

        jLabel32.setFont(mainPanel.getFont_secondTitle());
        jLabel32.setText("Integrity Requirement (IR)");

        combobox_env_integReq.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Not Defined (IR:X)", "Low (IR:L)", "Medium (IR:M)", "High (IR:H)" }));
        combobox_env_integReq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_env_integReqActionPerformed(evt);
            }
        });

        jLabel33.setFont(mainPanel.getFont_secondTitle());
        jLabel33.setText("Availability Requirement (AR)");

        combobox_env_availReq.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Not Defined (AR:X)", "Low (AR:L)", "Medium (AR:M)", "High (AR:H)" }));
        combobox_env_availReq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_env_availReqActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout EnvironmentalPanelLayout = new javax.swing.GroupLayout(EnvironmentalPanel);
        EnvironmentalPanel.setLayout(EnvironmentalPanelLayout);
        EnvironmentalPanelLayout.setHorizontalGroup(
            EnvironmentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EnvironmentalPanelLayout.createSequentialGroup()
                .addGroup(EnvironmentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(combobox_env_attackVector, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, EnvironmentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(combobox_env_scope, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(EnvironmentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(EnvironmentalPanelLayout.createSequentialGroup()
                        .addGroup(EnvironmentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(combobox_env_confImpact, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(EnvironmentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(combobox_env_integrityImpact, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(EnvironmentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(combobox_env_availabilityImpact, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(EnvironmentalPanelLayout.createSequentialGroup()
                        .addGroup(EnvironmentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(combobox_env_attackComplexity, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(EnvironmentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(combobox_env_PrivilagesRequired, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(EnvironmentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(combobox_env_userInteraction, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))))
            .addGroup(EnvironmentalPanelLayout.createSequentialGroup()
                .addGroup(EnvironmentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(combobox_env_confReq, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(EnvironmentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel32, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(combobox_env_integReq, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(EnvironmentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel33, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(combobox_env_availReq, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        EnvironmentalPanelLayout.setVerticalGroup(
            EnvironmentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EnvironmentalPanelLayout.createSequentialGroup()
                .addGroup(EnvironmentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(EnvironmentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(EnvironmentalPanelLayout.createSequentialGroup()
                            .addComponent(jLabel20)
                            .addGap(0, 0, 0)
                            .addComponent(combobox_env_PrivilagesRequired, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(EnvironmentalPanelLayout.createSequentialGroup()
                            .addGroup(EnvironmentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel25)
                                .addComponent(jLabel27))
                            .addGap(0, 0, 0)
                            .addGroup(EnvironmentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(combobox_env_attackVector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(combobox_env_attackComplexity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(EnvironmentalPanelLayout.createSequentialGroup()
                        .addComponent(jLabel23)
                        .addGap(0, 0, 0)
                        .addComponent(combobox_env_userInteraction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(EnvironmentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(EnvironmentalPanelLayout.createSequentialGroup()
                        .addComponent(jLabel22)
                        .addGap(0, 0, 0)
                        .addComponent(combobox_env_availabilityImpact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(EnvironmentalPanelLayout.createSequentialGroup()
                        .addGroup(EnvironmentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel24)
                            .addComponent(jLabel21))
                        .addGap(0, 0, 0)
                        .addGroup(EnvironmentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(combobox_env_confImpact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(combobox_env_integrityImpact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, EnvironmentalPanelLayout.createSequentialGroup()
                        .addComponent(jLabel26)
                        .addGap(0, 0, 0)
                        .addComponent(combobox_env_scope, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(EnvironmentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(EnvironmentalPanelLayout.createSequentialGroup()
                        .addComponent(jLabel28)
                        .addGap(0, 0, 0)
                        .addComponent(combobox_env_confReq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(EnvironmentalPanelLayout.createSequentialGroup()
                        .addComponent(jLabel32)
                        .addGap(0, 0, 0)
                        .addComponent(combobox_env_integReq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(EnvironmentalPanelLayout.createSequentialGroup()
                        .addComponent(jLabel33)
                        .addGap(0, 0, 0)
                        .addComponent(combobox_env_availReq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        jLabel30.setFont(mainPanel.getFont_secondTitleBold());
        jLabel30.setText("Environmental Scores");

        jScrollPane4.setBorder(null);
        jScrollPane4.setFont(mainPanel.getFont_table());

        scoreTable.setFont(mainPanel.getFont_table());
        scoreTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", "", "", ""}
            },
            new String [] {
                "Base", "Temporal", "Environmental", "Overall"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(scoreTable);

        jScrollPane7.setBorder(null);
        jScrollPane7.setFont(mainPanel.getFont_table());

        envScoreTable.setFont(mainPanel.getFont_table());
        envScoreTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "Environmental", "Modified Impact"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(envScoreTable);

        jLabel12.setFont(mainPanel.getFont_secondTitleBold());
        jLabel12.setText("Scores");

        nvdSiteButton1.setText("Reset");
        nvdSiteButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nvdSiteButton1ActionPerformed(evt);
            }
        });

        jScrollPane5.setBorder(null);
        jScrollPane5.setFont(mainPanel.getFont_table());

        baseScoreTable.setFont(mainPanel.getFont_table());
        baseScoreTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "Base", "Impact", "Exploitability"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(baseScoreTable);

        jLabel17.setFont(mainPanel.getFont_secondTitleBold());
        jLabel17.setText("Base Scores");

        jLabel18.setFont(mainPanel.getFont_secondTitleBold());
        jLabel18.setText("Vector:");

        Vector_textField.setEditable(false);
        Vector_textField.setFont(mainPanel.getFont_vector());

        copyButton.setText("Copy");
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });

        nvdSiteButton.setText("Visit NVD site");
        nvdSiteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nvdSiteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout scorePanelLayout = new javax.swing.GroupLayout(scorePanel);
        scorePanel.setLayout(scorePanelLayout);
        scorePanelLayout.setHorizontalGroup(
            scorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4)
            .addGroup(scorePanelLayout.createSequentialGroup()
                .addGroup(scorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(scorePanelLayout.createSequentialGroup()
                        .addComponent(copyButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nvdSiteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nvdSiteButton1))
                    .addComponent(jLabel12))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(scorePanelLayout.createSequentialGroup()
                .addGroup(scorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel17)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(scorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel30)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
            .addGroup(scorePanelLayout.createSequentialGroup()
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Vector_textField))
        );
        scorePanelLayout.setVerticalGroup(
            scorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scorePanelLayout.createSequentialGroup()
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(scorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel17)
                    .addComponent(jLabel30))
                .addGap(0, 0, 0)
                .addGroup(scorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(scorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(Vector_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(scorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(copyButton)
                    .addComponent(nvdSiteButton)
                    .addComponent(nvdSiteButton1)))
        );

        javax.swing.GroupLayout CVSS3_PanelLayout = new javax.swing.GroupLayout(CVSS3_Panel);
        CVSS3_Panel.setLayout(CVSS3_PanelLayout);
        CVSS3_PanelLayout.setHorizontalGroup(
            CVSS3_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CVSS3_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CVSS3_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(checkbox_baseScore)
                    .addComponent(checkbox_TemporalScore)
                    .addComponent(checkbox_EnvironmentalScore)
                    .addComponent(TemporalPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BasePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(EnvironmentalPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scorePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        CVSS3_PanelLayout.setVerticalGroup(
            CVSS3_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CVSS3_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(checkbox_baseScore)
                .addGap(0, 0, 0)
                .addComponent(BasePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkbox_TemporalScore)
                .addGap(0, 0, 0)
                .addComponent(TemporalPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkbox_EnvironmentalScore)
                .addGap(0, 0, 0)
                .addComponent(EnvironmentalPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scorePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(CVSS3_Panel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void checkbox_baseScoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkbox_baseScoreActionPerformed
        BasePanel.setVisible(checkbox_baseScore.isSelected());
    }//GEN-LAST:event_checkbox_baseScoreActionPerformed

    private void combobox_base_attackVectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_base_attackVectorActionPerformed
        updateScores();
    }//GEN-LAST:event_combobox_base_attackVectorActionPerformed

    private void combobox_base_attackComplexityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_base_attackComplexityActionPerformed
        updateScores();
    }//GEN-LAST:event_combobox_base_attackComplexityActionPerformed

    private void combobox_base_privilagesRequiredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_base_privilagesRequiredActionPerformed
        updateScores();
    }//GEN-LAST:event_combobox_base_privilagesRequiredActionPerformed

    private void combobox_base_integrityImpactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_base_integrityImpactActionPerformed
        updateScores();
    }//GEN-LAST:event_combobox_base_integrityImpactActionPerformed

    private void combobox_base_availabilityImpactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_base_availabilityImpactActionPerformed
        updateScores();
    }//GEN-LAST:event_combobox_base_availabilityImpactActionPerformed

    private void combobox_base_confImpactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_base_confImpactActionPerformed
        updateScores();
    }//GEN-LAST:event_combobox_base_confImpactActionPerformed

    private void combobox_base_userInteractionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_base_userInteractionActionPerformed
        updateScores();
    }//GEN-LAST:event_combobox_base_userInteractionActionPerformed

    private void combobox_base_scopeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_base_scopeActionPerformed
        updateScores();
    }//GEN-LAST:event_combobox_base_scopeActionPerformed

    private void checkbox_TemporalScoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkbox_TemporalScoreActionPerformed
        TemporalPanel.setVisible(checkbox_TemporalScore.isSelected());
    }//GEN-LAST:event_checkbox_TemporalScoreActionPerformed

    private void combobox_temporal_exploitabilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_temporal_exploitabilityActionPerformed
        updateScores();
    }//GEN-LAST:event_combobox_temporal_exploitabilityActionPerformed

    private void combobox_temporal_remediationLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_temporal_remediationLevelActionPerformed
        updateScores();
    }//GEN-LAST:event_combobox_temporal_remediationLevelActionPerformed

    private void combobox_temporal_reportConfidenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_temporal_reportConfidenceActionPerformed
        updateScores();
    }//GEN-LAST:event_combobox_temporal_reportConfidenceActionPerformed

    private void checkbox_EnvironmentalScoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkbox_EnvironmentalScoreActionPerformed
        EnvironmentalPanel.setVisible(checkbox_EnvironmentalScore.isSelected());
    }//GEN-LAST:event_checkbox_EnvironmentalScoreActionPerformed

    private void combobox_env_availabilityImpactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_env_availabilityImpactActionPerformed
        updateScores();
    }//GEN-LAST:event_combobox_env_availabilityImpactActionPerformed

    private void combobox_env_attackComplexityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_env_attackComplexityActionPerformed
        updateScores();
    }//GEN-LAST:event_combobox_env_attackComplexityActionPerformed

    private void combobox_env_scopeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_env_scopeActionPerformed
        updateScores();
    }//GEN-LAST:event_combobox_env_scopeActionPerformed

    private void combobox_env_confImpactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_env_confImpactActionPerformed
        updateScores();
    }//GEN-LAST:event_combobox_env_confImpactActionPerformed

    private void combobox_env_userInteractionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_env_userInteractionActionPerformed
        updateScores();
    }//GEN-LAST:event_combobox_env_userInteractionActionPerformed

    private void combobox_env_PrivilagesRequiredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_env_PrivilagesRequiredActionPerformed
        updateScores();
    }//GEN-LAST:event_combobox_env_PrivilagesRequiredActionPerformed

    private void combobox_env_attackVectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_env_attackVectorActionPerformed
        updateScores();
    }//GEN-LAST:event_combobox_env_attackVectorActionPerformed

    private void combobox_env_integrityImpactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_env_integrityImpactActionPerformed
        updateScores();
    }//GEN-LAST:event_combobox_env_integrityImpactActionPerformed

    private void combobox_env_confReqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_env_confReqActionPerformed
        updateScores();
    }//GEN-LAST:event_combobox_env_confReqActionPerformed

    private void combobox_env_integReqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_env_integReqActionPerformed
        updateScores();
    }//GEN-LAST:event_combobox_env_integReqActionPerformed

    private void combobox_env_availReqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_env_availReqActionPerformed
        updateScores();
    }//GEN-LAST:event_combobox_env_availReqActionPerformed

    private void nvdSiteButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nvdSiteButton1ActionPerformed
        resetPanel();
    }//GEN-LAST:event_nvdSiteButton1ActionPerformed

    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed
        StringSelection selection = new StringSelection(Vector_textField.getText().toString());
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(selection, selection);
    }//GEN-LAST:event_copyButtonActionPerformed

    private void nvdSiteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nvdSiteButtonActionPerformed
        if (Desktop.isDesktopSupported()) {
            try {
                URI uri = new URI("https://nvd.nist.gov/cvss/v3-calculator?vector="+Vector_textField.getText().toString());
                Desktop.getDesktop().browse(uri);
            } catch (IOException e) { /* TODO: error handling */ } catch (URISyntaxException ex) {
                BurpExtender.output.println("Error opening URI");
            }
        } else {
            BurpExtender.output.println("Desktop is not Supported");
        }
    }//GEN-LAST:event_nvdSiteButtonActionPerformed


    private double calculateBaseScore(){
        double base_ISC = 1 - (1 - getBaseConfImpact()) * (1 - getBaseIntegImpact()) * (1 - getBaseAvailImpact());
        double exploitability = calculateBaseExploitability();
        double ISC=getBaseImpactSubScore(base_ISC);
        double baseScore = calculateBaseScore(ISC, exploitability);
        roundUp(baseScore);
        return baseScore;
        
    }
    
    private String calculateBaseScore_Formated(){
        return decimalFormat(calculateBaseScore());
    }
    
    private String[] calculateBaseScore_Array(){
        String[]baseScoreArray=new String[3];
        double base_ISC = 1 - (1 - getBaseConfImpact()) * (1 - getBaseIntegImpact()) * (1 - getBaseAvailImpact());
        double exploitability = calculateBaseExploitability();
        double impact=getBaseImpactSubScore(base_ISC);
        double baseScore = calculateBaseScore(impact, exploitability);
        baseScoreArray[0]=decimalFormat(baseScore);
        baseScoreArray[1]=decimalFormat(impact);
        baseScoreArray[2]=decimalFormat(exploitability);
        return baseScoreArray;
    }
    
    private double calculateTemporalScore(){
        return roundUp(calculateBaseScore()*getTempExploitability()*getTempRemediationLevel()*getTempReportConfidence());
    }
    
    private String calculateTemporalScore_Formatted(){
        return decimalFormat(calculateTemporalScore());
    }
    
    private double calculateEnvironmentalScore(){
        double Mod_Exploitability_SubScore=getEnv_Mod_ESS();
        double mod_ISC=Math.min((1-(1-getEnvModConfImpact()*getEnviron_ConfReq())*(1-getEnvModIntegImpact()*getEnviron_IntegReq())*(1-getEnvModAvailImpact()*getEnviron_AvailReq())), 0.915);
        double Mod_impact=getModImpactSubScore(mod_ISC);
        double ModScore = calculateModScore(Mod_impact, Mod_Exploitability_SubScore);
        return ModScore;
    }
    
    private String calculateEnvironmentalScore_Formatted(){
        return decimalFormat(calculateEnvironmentalScore());
    }
    
    private String[] calculateEnvironmentalScore_Array(){
        String[]envScoreArray=new String[2];
        double Mod_Exploitability_SubScore=getEnv_Mod_ESS();
        double mod_ISC=Math.min((1-(1-getEnvModConfImpact()*getEnviron_ConfReq())*(1-getEnvModIntegImpact()*getEnviron_IntegReq())*(1-getEnvModAvailImpact()*getEnviron_AvailReq())), 0.915);
        double Mod_impact=getModImpactSubScore(mod_ISC);
        double ModScore = calculateModScore(Mod_impact, Mod_Exploitability_SubScore);
        envScoreArray[0]=decimalFormat(ModScore);
        envScoreArray[1]=decimalFormat(Mod_impact);
        return envScoreArray;
    }
    
    private double getBaseImpactSubScore(double base_ISC) {
        if(getBase_ScopeIsChanged()){
            return 7.52*(base_ISC-0.029)-3.25*Math.pow((base_ISC-0.02), 15);
        }
        else{
            return 6.42*base_ISC;
        }
    }
    
    private double getModImpactSubScore(double mod_ISC) {
        if(getEnvMod_ScopeIsChanged()){
            return 7.52*(mod_ISC-0.029)-3.25*Math.pow((mod_ISC-0.02), 15);
        }
        else{
            return 6.42*mod_ISC;
        }
    }
    
    private double getEnv_Mod_ESS() {  //Modified Exploitability sub score
        return 8.22*getEnvModAttackVector()*getEnvModAttackComplexity()*getEnvModPrivilagesRequired()*getEnvModUserInteraction();
    }
    
    private double calculateBaseExploitability(){
        return 8.22 * getBaseAttackVector() * getBaseAttackComplexity() * getBasePrivilagesRequired()*getBaseUserInteraction();
    }
    
    private double calculateBaseScore(double ISC,double exploitability){
        if(ISC<=0){
            return 0;
        }
        if(!getBase_ScopeIsChanged()){
            return roundUp(Math.min(ISC+exploitability, 10));
        }
        else{
            return roundUp(Math.min(1.08*(ISC+exploitability), 10));
        }
    }
    
    private double calculateModScore(double Mod_impact, double Mod_Exploitability_SubScore) {
        if(Mod_impact<=0){
            return 0;
        }
        if(!getEnvMod_ScopeIsChanged()){    //unchanged
            return roundUp(roundUp(Math.min(Mod_impact+Mod_Exploitability_SubScore, 10))*getTempExploitability()*getTempRemediationLevel()*getTempReportConfidence());
        }   
        else{
            return roundUp(roundUp(Math.min(1.08*Mod_impact+Mod_Exploitability_SubScore, 10))*getTempExploitability()*getTempRemediationLevel()*getTempReportConfidence());
        }
    }
    private double getBaseAttackVector(){
        int index=combobox_base_attackVector.getSelectedIndex();
        switch(index){
            case 0:
                return 0.85;   //Requires Network access
            case 1:
                return 0.62;   //Adjacent
            case 2:
                return 0.55;       //Local
            case 3:
                return 0.2;       //Physical
        }
        return -1;
    }
    
    private double getBaseAttackComplexity(){
        int index=combobox_base_attackComplexity.getSelectedIndex();
        switch(index){
            case 0:     //Low
                return 0.77;
            case 1:     //High
                return 0.44;
        }
        return -1;
    }
    private double getBasePrivilagesRequired() {
        int index = combobox_base_privilagesRequired.getSelectedIndex();
        if (!getBase_ScopeIsChanged()) {    //scope is unchanged
            switch (index) {
                case 0:
                    return 0.85;    //None
                case 1:
                    return 0.62;    //Low [0.62 (0.68 if Scope/ Modified Scope is Changed)]
                case 2:
                    return 0.27;   //High [0.27 (0.50 if Scope/ Modified Scope is Changed)]
            }
        } else {    //scope is changed
            switch (index) {  
                case 0:
                    return 0.85;    //None
                case 1:
                    return 0.68;    //Low [0.62 (0.68 if Scope/ Modified Scope is Changed)]
                case 2:
                    return 0.5;   //High [0.27 (0.50 if Scope/ Modified Scope is Changed)]
            }
        }
        return -1;
    }
    
    private double getBaseUserInteraction(){
        int index=combobox_base_userInteraction.getSelectedIndex();
        switch(index){
            case 0:
                return 0.85;    //None
            case 1:
                return 0.62;    //Required
        }
        return -1;
    }
    
    private boolean getBase_ScopeIsChanged(){
        int index=combobox_base_scope.getSelectedIndex();
        switch(index){
            case 0: //unchanged
                return false;
            case 1: //changed
                return true;
        }
        return false;
    }
    
    private double getBaseConfImpact(){
        int index=combobox_base_confImpact.getSelectedIndex();
        switch(index){
            case 0:             //None
                return 0;
            case 1:             //Low
                return 0.22;
            case 2:             //High
                return 0.56;
        }
        return -1;
    }
    
    private double getBaseIntegImpact(){
        int index=combobox_base_integrityImpact.getSelectedIndex();
        switch(index){
            case 0:             //None
                return 0;
            case 1:             //Low
                return 0.22;
            case 2:             //High
                return 0.56;
        }
        return -1;
    }
    
    private double getBaseAvailImpact(){
        int index=combobox_base_availabilityImpact.getSelectedIndex();
        switch(index){
            case 0:             //None
                return 0;
            case 1:             //Low
                return 0.22;
            case 2:             //High
                return 0.56;
        }
        return -1;
    }
    
    private double getTempExploitability() {
        int index=combobox_temporal_exploitability.getSelectedIndex();
        switch(index){
            case 0:         //Not Defined (E:X)
                return 1;  
            case 1:         //Unproven that exploit exists (E:U)         
                return 0.91;
            case 2:         //Proof of concept code (E:P)
                return 0.94;
            case 3:         //Functional exploit exists (E:F)
                return 0.97;
            case 4:         //High (E:H)
                return 1;
        }
        return -1;
    }

    private double getTempRemediationLevel() {
        int index=combobox_temporal_remediationLevel.getSelectedIndex();
        switch(index){
            case 0: //Not Defined (RL:X)
                return 1;
            case 1:    //Official fix (RL:O)
                return 0.95;
            case 2: //Temporary fix (RL:T)
                return 0.96;
            case 3:  //Workaround (RL:W)
                return 0.97;
            case 4: //Unavailable (RL:U)
                return 1;
        }
        return -1;
    }
    
    private double getTempReportConfidence() {
        int index=combobox_temporal_reportConfidence.getSelectedIndex();
        switch(index){
            case 0: //Not Defined (RC:X)
                return 1;
            case 1: //Unknown (RC:U)
                return 0.92;
            case 2:  //Reasonable (RC:R)
                return 0.96;
            case 3:   //Confirmed (RC:C)
                return 1;
        }
        return -1;
    }
    
    private double getEnviron_ConfReq() {
        int index=combobox_env_confReq.getSelectedIndex();
        switch(index){
            case 0: //Not Defined (CR:X)
                return 1;
            case 1: //Low (CR:L)
                return 0.5;    
            case 2:  //Medium (CR:M)
                return 1;
            case 3:    //High (CR:H)
                return 1.5;    
        }
        return -1;
    }
    
    private double getEnviron_IntegReq() {
        int index=combobox_env_integReq.getSelectedIndex();
        switch(index){
            case 0: //Not Defined (IR:X)
                return 1;
            case 1: //Low (IR:L)
                return 0.5;    
            case 2:  //Medium (IR:M)
                return 1;
            case 3:    //High (IR:H)
                return 1.5;    
        }
        return -1;
    }
    
    private double getEnviron_AvailReq() {
        int index=combobox_env_availReq.getSelectedIndex();
        switch(index){
            case 0: //Not Defined (CR:X)
                return 1;
            case 1: //Low (AR:L)
                return 0.5;    
            case 2:  //Medium (AR:M)
                return 1;
            case 3:    //High (AR:H)
                return 1.5;    
        }
        return -1;
    }
    //****************************************************************************************
    private double getEnvModAttackVector(){
        int index=combobox_env_attackVector.getSelectedIndex();
        switch(index){
            case 0:
                return getBaseAttackVector();   //Not defined
            case 1:
                return 0.85;   //Requires Network access
            case 2:
                return 0.62;   //Adjacent
            case 3:
                return 0.55;       //Local
            case 4:
                return 0.2;       //Physical
        }
        return 1;
    }
    
    private double getEnvModAttackComplexity(){
        int index=combobox_env_attackComplexity.getSelectedIndex();
        switch(index){
            case 0:
                return getBaseAttackComplexity();   //Not defined
            case 1:     //Low
                return 0.77;
            case 2:     //High
                return 0.44;
        }
        return 1;
    }
    private double getEnvModPrivilagesRequired() {
        int index = combobox_env_PrivilagesRequired.getSelectedIndex();
        if (!getEnvMod_ScopeIsChanged()) {    //scope is unchanged
            switch (index) {
                case 0:
                return getBasePrivilagesRequired();   //Not defined
                case 1:
                    return 0.85;    //None
                case 2:
                    return 0.62;    //Low [0.62 (0.68 if Scope/ Modified Scope is Changed)]
                case 3:
                    return 0.27;   //High [0.27 (0.50 if Scope/ Modified Scope is Changed)]
            }
        } else {    //scope is changed
            switch (index) {  
                case 0:
                return getBasePrivilagesRequired();   //Not defined
                case 1:
                    return 0.85;    //None
                case 2:
                    return 0.68;    //Low [0.62 (0.68 if Scope/ Modified Scope is Changed)]
                case 3:
                    return 0.5;   //High [0.27 (0.50 if Scope/ Modified Scope is Changed)]
            }
        }
        return 1;
    }
    
    private double getEnvModUserInteraction(){
        int index=combobox_env_userInteraction.getSelectedIndex();
        switch(index){
            case 0:
                return getBaseUserInteraction();   //Not defined
            case 1:
                return 0.85;    //None
            case 2:
                return 0.62;    //Required
        }
        return 1;
    }
    
    private boolean getEnvMod_ScopeIsChanged(){
        int index=combobox_env_scope.getSelectedIndex();
        switch(index){
            case 0:
                return getBase_ScopeIsChanged();   //Not defined
            case 1: //unchanged
                return false;
            case 2: //changed
                return true;
        }
        return false;
    }
    
    private double getEnvModConfImpact(){
        int index=combobox_env_confImpact.getSelectedIndex();
        switch(index){
            case 0:
                return getBaseConfImpact();   //Not defined
            case 1:             //None
                return 0;
            case 2:             //Low
                return 0.22;
            case 3:             //High
                return 0.56;
        }
        return 1;
    }
    
    private double getEnvModIntegImpact(){
        int index=combobox_env_integrityImpact.getSelectedIndex();
        switch(index){
            case 0:
                return getBaseIntegImpact();   //Not defined
            case 1:             //None
                return 0;
            case 2:             //Low
                return 0.22;
            case 3:             //High
                return 0.56;
        }
        return 1;
    }
    
    private double getEnvModAvailImpact(){
        int index=combobox_env_availabilityImpact.getSelectedIndex();
        switch(index){
            case 0:
                return getBaseAvailImpact();   //Not defined
            case 1:             //None
                return 0;
            case 2:             //Low
                return 0.22;
            case 3:             //High
                return 0.56;
        }
        return 1;
    }
    //**********************************************************************************

    private void makeInvisible() {
        TemporalPanel.setVisible(false);
        EnvironmentalPanel.setVisible(false);
    }
    
    private String decimalFormat(double score){
        String pattern = "0.0";
        DecimalFormat df = new DecimalFormat(pattern);
        return df.format(score);
    }

    private void updateScores() {
        //clearScoreTable();//to correct behavior of table coloring, since severities are added later.
        updateBasecore();
        updateTemporalScore();
        updateEnvironmentalScore();
        updateOveralScore();
        //updateSeverities();
        updateCVSS3_Vector();
    }
    private void updateBasecore() {
        String score=calculateBaseScore_Formated();
        scoreTable.setValueAt(score, 0, 0);
        String[]arr=calculateBaseScore_Array();
        baseScoreTable.setValueAt(arr[0], 0, 0);
        baseScoreTable.setValueAt(arr[1], 0, 1);
        baseScoreTable.setValueAt(arr[2], 0, 2);
    }
    private void updateTemporalScore() {
        String score=calculateTemporalScore_Formatted();
        scoreTable.setValueAt(score, 0, 1);
    }
    
    private void updateEnvironmentalScore() {
        String score=calculateEnvironmentalScore_Formatted();
        scoreTable.setValueAt(score, 0, 2);
        String[]arr=calculateEnvironmentalScore_Array();
        envScoreTable.setValueAt(arr[0], 0, 0);
        envScoreTable.setValueAt(arr[1], 0, 1);
    }

    private void updateOveralScore() {
        String overalScore="0.0";
        if(!isEnvironmentalParamsFilled()){
            if(!isTemporalParamsFilled()){
                scoreTable.setValueAt(calculateBaseScore_Formated(), 0, 3);
            }
            else{
                scoreTable.setValueAt(calculateTemporalScore_Formatted(), 0, 3);
            }
        }
        else{
            scoreTable.setValueAt(calculateEnvironmentalScore_Formatted(), 0, 3);
        }
    }
    
    private void updateSeverities() {
        for (int i=0;i<scoreTable.getColumnCount();i++){
            String str=scoreTable.getValueAt(0, i).toString();
            if(str.length()>0){
                double score=removeSeverityFromScore(str);
                str=addSeverityToScore(score);
                scoreTable.setValueAt(str, 0, i);
            }
        }
    }
    
    private String addSeverityToScore(double score) {
        if(score>=9){
            return score+" (Critical)";
        }
        else if(score>=7){
            return score+" (High)";
        }
        else if(score>=4){
            return score+" (Medium)";
        }
        else if(score>=0.1){
            return score+" (Low)";
        }
        else{
            return score+"";
        }
    }
    
    private void updateCVSS3_Vector() {
        Vector_textField.setText(getVector());
    }

    private String getVector() {
        String vector="(";
        vector=vector+getBaseVector();
        vector=vector+getTemporalVector();
        vector=vector+getEnvironmentalVector();
        vector+=")";
        return vector;
    }
    
    private String getBaseVector() {
        String baseVector="";
        baseVector+=getSubVector(combobox_base_attackVector)+"/";
        baseVector+=getSubVector(combobox_base_attackComplexity)+"/";
        baseVector+=getSubVector(combobox_base_privilagesRequired)+"/";
        baseVector+=getSubVector(combobox_base_userInteraction)+"/";
        baseVector+=getSubVector(combobox_base_scope)+"/";
        baseVector+=getSubVector(combobox_base_confImpact)+"/";
        baseVector+=getSubVector(combobox_base_integrityImpact)+"/";
        baseVector+=getSubVector(combobox_base_availabilityImpact);
        return baseVector;
    }
    private String getTemporalVector() {
        String vector="";
        if(!isTemporalParamsFilled()){
            //do nothing
        }
        else{
            vector+="/"+getSubVector(combobox_temporal_exploitability)+"/";
            vector+=getSubVector(combobox_temporal_remediationLevel)+"/";
            vector+=getSubVector(combobox_temporal_reportConfidence);
        }
        return vector;
    }
    
    private String getEnvironmentalVector() {
        String vector="";
        if(!isEnvironmentalParamsFilled()){
            //do nothing
        }
        else{
            vector+="/"+getSubVector(combobox_env_confReq)+"/";
            vector+=getSubVector(combobox_env_integReq)+"/";
            vector+=getSubVector(combobox_env_availReq)+"/";
            vector+=getSubVector(combobox_env_attackVector)+"/";
            vector+=getSubVector(combobox_env_attackComplexity)+"/";
            vector+=getSubVector(combobox_env_PrivilagesRequired)+"/";
            vector+=getSubVector(combobox_env_userInteraction)+"/";
            vector+=getSubVector(combobox_env_scope)+"/";
            vector+=getSubVector(combobox_env_confImpact)+"/";
            vector+=getSubVector(combobox_env_integrityImpact)+"/";
            vector+=getSubVector(combobox_env_availabilityImpact);
        }
        return vector;
    }
    
    private boolean isTemporalParamsFilled() {
        if(combobox_temporal_exploitability.getSelectedIndex()==0&&combobox_temporal_remediationLevel.getSelectedIndex()==0&&combobox_temporal_reportConfidence.getSelectedIndex()==0){
            return false;
        }
        return true;
    }
    
    private boolean isEnvironmentalParamsFilled() {
        if(NotDefined(combobox_env_attackVector)&&NotDefined(combobox_env_attackComplexity)&&NotDefined(combobox_env_PrivilagesRequired)&&NotDefined(combobox_env_userInteraction)
                &&NotDefined(combobox_env_scope)&&NotDefined(combobox_env_confImpact)&&NotDefined(combobox_env_integrityImpact)&&NotDefined(combobox_env_availabilityImpact)
                &&NotDefined(combobox_env_confReq)&&NotDefined(combobox_env_integReq)&&NotDefined(combobox_env_availReq)){
            return false;
        }
        return true;
    }

    private String getSubVector(JComboBox<String> combobox) {
        String text=combobox.getSelectedItem().toString();
        return text.substring(text.indexOf("(")+1, text.indexOf(")"));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BasePanel;
    public static javax.swing.JPanel CVSS3_Panel;
    private javax.swing.JPanel EnvironmentalPanel;
    private javax.swing.JPanel TemporalPanel;
    private javax.swing.JTextField Vector_textField;
    private javax.swing.JTable baseScoreTable;
    private javax.swing.JCheckBox checkbox_EnvironmentalScore;
    private javax.swing.JCheckBox checkbox_TemporalScore;
    private javax.swing.JCheckBox checkbox_baseScore;
    private javax.swing.JComboBox<String> combobox_base_attackComplexity;
    private javax.swing.JComboBox<String> combobox_base_attackVector;
    private javax.swing.JComboBox<String> combobox_base_availabilityImpact;
    private javax.swing.JComboBox<String> combobox_base_confImpact;
    private javax.swing.JComboBox<String> combobox_base_integrityImpact;
    private javax.swing.JComboBox<String> combobox_base_privilagesRequired;
    private javax.swing.JComboBox<String> combobox_base_scope;
    private javax.swing.JComboBox<String> combobox_base_userInteraction;
    private javax.swing.JComboBox<String> combobox_env_PrivilagesRequired;
    private javax.swing.JComboBox<String> combobox_env_attackComplexity;
    private javax.swing.JComboBox<String> combobox_env_attackVector;
    private javax.swing.JComboBox<String> combobox_env_availReq;
    private javax.swing.JComboBox<String> combobox_env_availabilityImpact;
    private javax.swing.JComboBox<String> combobox_env_confImpact;
    private javax.swing.JComboBox<String> combobox_env_confReq;
    private javax.swing.JComboBox<String> combobox_env_integReq;
    private javax.swing.JComboBox<String> combobox_env_integrityImpact;
    private javax.swing.JComboBox<String> combobox_env_scope;
    private javax.swing.JComboBox<String> combobox_env_userInteraction;
    private javax.swing.JComboBox<String> combobox_temporal_exploitability;
    private javax.swing.JComboBox<String> combobox_temporal_remediationLevel;
    private javax.swing.JComboBox<String> combobox_temporal_reportConfidence;
    private javax.swing.JButton copyButton;
    private javax.swing.JTable envScoreTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JButton nvdSiteButton;
    private javax.swing.JButton nvdSiteButton1;
    private javax.swing.JPanel scorePanel;
    private javax.swing.JTable scoreTable;
    // End of variables declaration//GEN-END:variables

    private boolean NotDefined(JComboBox<String> combobox) {
        return combobox.getSelectedIndex()==0;
    }

    private double roundUp(double num) {
        num*=10;
        num=Math.ceil(num);
        num/=10;
        return num;
    }
    
    private Color getColor(Double score) {
        if (score >= 9) {  //Critical (175,0,0) -> (90,0,0), Dif=175-90=85, dif [9,10]=1
            return new Color ((int) (175-(score-9)*85),0,0);
        } else if (score >= 7) {    //High (255,0,0) -> (200,0,0), Dif=255-200=55, dif [7,9)=2
            return new Color ((int) (255-((score-7)/2)*55),0,0);
        } else if (score >= 4) {    //Medium (255,200,0) -> (255,90,0), Dif=170-90=110, dif [4,7)=3
            return new Color (255,(int) (200-((score-4)/3)*110),0);
        } else if (score >= 0.1) {  //Low (255,255,120) -> (255,255,0), Dif=170-90=120, dif [0,4)=4
            return new Color (255,255,(int) (120-((score-0)/4)*120));
        } else {    //None
            return Color.WHITE;
        }
    }
    
    private Double removeSeverityFromScore(String score) {
        if(score.startsWith("10")){
            return Double.parseDouble(score.substring(0, 4));
        }
        else{
            return Double.parseDouble(score.substring(0, 3));
        }
    }

    private void clearTables() {
        clearTable(scoreTable);
        clearTable(baseScoreTable);
        clearTable(envScoreTable);
    }

    private void clearTable(JTable table) {
        for (int i = 0; i < table.getColumnCount(); i++) {
            table.setValueAt("", 0, i);
        }
    }

    private void resetPanel() {
        resetCheckboxes();
        clearTables();
        Vector_textField.setText("");
    }

    private void resetCheckboxes() {
        combobox_base_attackVector.setSelectedIndex(0);
        combobox_base_attackComplexity.setSelectedIndex(0);
        combobox_base_privilagesRequired.setSelectedIndex(0);
        combobox_base_userInteraction.setSelectedIndex(0);
        combobox_base_scope.setSelectedIndex(0);
        combobox_base_confImpact.setSelectedIndex(0);
        combobox_base_integrityImpact.setSelectedIndex(0);
        combobox_base_availabilityImpact.setSelectedIndex(0);
        combobox_temporal_exploitability.setSelectedIndex(0);
        combobox_temporal_remediationLevel.setSelectedIndex(0);
        combobox_temporal_reportConfidence.setSelectedIndex(0);
        combobox_env_confReq.setSelectedIndex(0);
        combobox_env_integReq.setSelectedIndex(0);
        combobox_env_availReq.setSelectedIndex(0);
        combobox_env_attackVector.setSelectedIndex(0);
        combobox_env_attackComplexity.setSelectedIndex(0);
        combobox_env_PrivilagesRequired.setSelectedIndex(0);
        combobox_env_userInteraction.setSelectedIndex(0);
        combobox_env_scope.setSelectedIndex(0);
        combobox_env_confImpact.setSelectedIndex(0);
        combobox_env_integrityImpact.setSelectedIndex(0);
        combobox_env_availabilityImpact.setSelectedIndex(0);
    }
    
}
