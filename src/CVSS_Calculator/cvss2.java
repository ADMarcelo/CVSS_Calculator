/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package CVSS_Calculator;

import burp.BurpExtender;
import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.text.DecimalFormat;
import javax.swing.BorderFactory;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JTable;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author moein
 */
public class cvss2 extends javax.swing.JPanel {

    /**
     * Creates new form test
     */
    public cvss2() {
        initComponents();
        initialize();
    }
    
    private void initialize() {
        makeInvisible();
        clearTables();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        CVSS2_Panel = new javax.swing.JPanel();
        checkbox_baseScore = new javax.swing.JCheckBox();
        BasePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        combobox_base_accessVector = new javax.swing.JComboBox<>();
        combobox_base_accessComplexity = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        combobox_base_Authentication = new javax.swing.JComboBox<>();
        combobox_base_integrityImpact = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        combobox_base_availabilityImpact = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        combobox_base_confImpact = new javax.swing.JComboBox<>();
        checkbox_TemporalScore = new javax.swing.JCheckBox();
        TemporalPanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        combobox_temporal_exploitability = new javax.swing.JComboBox<>();
        combobox_temporal_remediationLevel = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        combobox_temporal_reportConfidence = new javax.swing.JComboBox<>();
        checkbox_EnvironmentalScore = new javax.swing.JCheckBox();
        EnvironmentalPanel = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        combobox_env_CollateralDamage = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        combobox_env_TargetDistribution = new javax.swing.JComboBox<>();
        combobox_env_IntegrityRequirement = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        combobox_env_AvailabilityRequirement = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        combobox_env_ConfidentialityRequirement = new javax.swing.JComboBox<>();
        scorePanel = new javax.swing.JPanel();
        copyButton = new javax.swing.JButton();
        nvdSiteButton = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        envScoreTable = new javax.swing.JTable() {
            public Component prepareRenderer(TableCellRenderer renderer, int row, int column) {
                Component c = super.prepareRenderer(renderer, row, column);
                try{
                    String score =  envScoreTable.getModel().getValueAt(row, column ).toString();
                    if(score.length()>0){
                        double sc=removeSeverityFromScore(score);
                        c.setBackground(getColor(sc));
                        if(sc>=7){  //High and critical =>font color: White
                            c.setForeground(Color.WHITE);
                        }
                        else{   //None, Low and Medium =>font color: Black
                            c.setForeground(Color.BLACK);
                        }
                    }
                    else{
                        c.setBackground(Color.WHITE);
                    }
                }
                catch(Exception e){
                    burp.BurpExtender.output.println("V2_EnvScore: Error Occured!");
                }
                return c;
            }
        };
        jLabel12 = new javax.swing.JLabel();
        nvdSiteButton1 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        baseScoreTable = new javax.swing.JTable() {
            public Component prepareRenderer(TableCellRenderer renderer, int row, int column) {
                Component c = super.prepareRenderer(renderer, row, column);
                try{
                    String score =  baseScoreTable.getModel().getValueAt(row, column ).toString();
                    if(score.length()>0){
                        double sc=removeSeverityFromScore(score);
                        c.setBackground(getColor(sc));
                        if(sc>=7){  //High and critical =>font color: White
                            c.setForeground(Color.WHITE);
                        }
                        else{   //None, Low and Medium =>font color: Black
                            c.setForeground(Color.BLACK);
                        }
                    }
                    else{
                        c.setBackground(Color.WHITE);
                    }
                }
                catch(Exception e){
                    burp.BurpExtender.output.println("V2_BaseScore: Error Occured!");
                }
                return c;
            }
        };
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        Vector_textField = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        scoreTable = new javax.swing.JTable() {
            public Component prepareRenderer(TableCellRenderer renderer, int row, int column) {
                Component c = super.prepareRenderer(renderer, row, column);
                try{
                    String score =  scoreTable.getModel().getValueAt(row, column ).toString();
                    if(score.length()>0){
                        double sc=removeSeverityFromScore(score);
                        c.setBackground(getColor(sc));
                        if(sc>=7){  //High and critical =>font color: White
                            c.setForeground(Color.WHITE);
                        }
                        else{   //None, Low and Medium =>font color: Black
                            c.setForeground(Color.BLACK);
                        }
                        if(column==3){      //add border to Overall score
                            JComponent jc = (JComponent)c;
                            if(sc>=7){
                                jc.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.WHITE));
                            }
                            else{
                                jc.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.BLACK));
                            }
                            c.setFont(mainPanel.getFont_mainTitle());
                            //c.setFont(new Font(font, Font.BOLD + Font.ITALIC,15));
                        }
                        updateSeverities();
                    }
                    else{
                        c.setBackground(Color.WHITE);
                    }
                }
                catch(Exception e){
                    burp.BurpExtender.output.println("V2_ScoreTable: Error Occured!");
                }
                return c;
            }

        };

        checkbox_baseScore.setFont(mainPanel.getFont_mainTitle());
        checkbox_baseScore.setSelected(true);
        checkbox_baseScore.setText("Base Score Metrics");
        checkbox_baseScore.setToolTipText("Base score");
        checkbox_baseScore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkbox_baseScoreActionPerformed(evt);
            }
        });

        jLabel1.setFont(mainPanel.getFont_secondTitle());
        jLabel1.setText("Access Vector (AV)");

        combobox_base_accessVector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Local (AV:L)", "Adjacent Network (AV:A)", "Network (AV:N)" }));
        combobox_base_accessVector.setSelectedIndex(2);
        combobox_base_accessVector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_base_accessVectorActionPerformed(evt);
            }
        });

        combobox_base_accessComplexity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "High (AC:H)", "Medium (AC:M)", "Low (AC:L)" }));
        combobox_base_accessComplexity.setSelectedIndex(2);
        combobox_base_accessComplexity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_base_accessComplexityActionPerformed(evt);
            }
        });

        jLabel2.setFont(mainPanel.getFont_secondTitle());
        jLabel2.setText("Access Complexity (AC)");

        jLabel3.setFont(mainPanel.getFont_secondTitle());
        jLabel3.setText("Authentication (Au)");

        combobox_base_Authentication.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Multiple (Au:M)", "Single (Au:S)", "None (Au:N)" }));
        combobox_base_Authentication.setSelectedIndex(2);
        combobox_base_Authentication.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_base_AuthenticationActionPerformed(evt);
            }
        });

        combobox_base_integrityImpact.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None (I:N)", "Partial (I:P)", "Complete (I:C)" }));
        combobox_base_integrityImpact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_base_integrityImpactActionPerformed(evt);
            }
        });

        jLabel4.setFont(mainPanel.getFont_secondTitle());
        jLabel4.setText("Integrity Impact (I)");

        jLabel5.setFont(mainPanel.getFont_secondTitle());
        jLabel5.setText("Availability Impact (A)");

        combobox_base_availabilityImpact.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None (A:N)", "Partial (A:P)", "Complete (A:C)" }));
        combobox_base_availabilityImpact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_base_availabilityImpactActionPerformed(evt);
            }
        });

        jLabel6.setFont(mainPanel.getFont_secondTitle());
        jLabel6.setText("Confidentiality Impact (C)");

        combobox_base_confImpact.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None (C:N)", "Partial (C:P)", "Complete (C:C)" }));
        combobox_base_confImpact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_base_confImpactActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout BasePanelLayout = new javax.swing.GroupLayout(BasePanel);
        BasePanel.setLayout(BasePanelLayout);
        BasePanelLayout.setHorizontalGroup(
            BasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BasePanelLayout.createSequentialGroup()
                .addGroup(BasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(combobox_base_accessVector, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(combobox_base_accessComplexity, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(combobox_base_Authentication, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(BasePanelLayout.createSequentialGroup()
                .addGroup(BasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(combobox_base_confImpact, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(combobox_base_integrityImpact, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(combobox_base_availabilityImpact, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        BasePanelLayout.setVerticalGroup(
            BasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BasePanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(BasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(combobox_base_Authentication, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(BasePanelLayout.createSequentialGroup()
                        .addGroup(BasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(0, 0, 0)
                        .addGroup(BasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(combobox_base_accessVector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(combobox_base_accessComplexity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(BasePanelLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(0, 0, 0)
                        .addComponent(combobox_base_availabilityImpact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(BasePanelLayout.createSequentialGroup()
                        .addGroup(BasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel4))
                        .addGap(0, 0, 0)
                        .addGroup(BasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(combobox_base_confImpact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(combobox_base_integrityImpact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
        );

        checkbox_TemporalScore.setFont(mainPanel.getFont_mainTitle());
        checkbox_TemporalScore.setText("Temporal Score Metrics");
        checkbox_TemporalScore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkbox_TemporalScoreActionPerformed(evt);
            }
        });

        jLabel7.setFont(mainPanel.getFont_secondTitle());
        jLabel7.setText("Exploitability (E)");

        combobox_temporal_exploitability.setFont(new java.awt.Font("Ubuntu", 0, 10)); // NOI18N
        combobox_temporal_exploitability.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Not Defined (E:ND)", "Unproven that exploit exists (E:U)", "Proof of concept code (E:POC)", "Functional exploit exists (E:F)", "High (E:H)" }));
        combobox_temporal_exploitability.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_temporal_exploitabilityActionPerformed(evt);
            }
        });

        combobox_temporal_remediationLevel.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Not Defined (RL:ND)", "Official fix (RL:OF)", "Temporary fix (RL:TF)", "Workaround (RL:W)", "Unavailable (RL:U)" }));
        combobox_temporal_remediationLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_temporal_remediationLevelActionPerformed(evt);
            }
        });

        jLabel8.setFont(mainPanel.getFont_secondTitle());
        jLabel8.setText(" Remediation Level (RL)");

        jLabel10.setFont(mainPanel.getFont_secondTitle());
        jLabel10.setText("Report Confidence (RC)");

        combobox_temporal_reportConfidence.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Not Defined (RC:ND)", "Unconfirmed (RC:UC)", "Uncorroborated (RC:UR)", "Confirmed (RC:C)" }));
        combobox_temporal_reportConfidence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_temporal_reportConfidenceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout TemporalPanelLayout = new javax.swing.GroupLayout(TemporalPanel);
        TemporalPanel.setLayout(TemporalPanelLayout);
        TemporalPanelLayout.setHorizontalGroup(
            TemporalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TemporalPanelLayout.createSequentialGroup()
                .addGroup(TemporalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(combobox_temporal_exploitability, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TemporalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(combobox_temporal_remediationLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TemporalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(combobox_temporal_reportConfidence, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        TemporalPanelLayout.setVerticalGroup(
            TemporalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TemporalPanelLayout.createSequentialGroup()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(combobox_temporal_reportConfidence, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TemporalPanelLayout.createSequentialGroup()
                .addGroup(TemporalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addGap(0, 0, 0)
                .addGroup(TemporalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combobox_temporal_exploitability, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combobox_temporal_remediationLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        checkbox_EnvironmentalScore.setFont(mainPanel.getFont_mainTitle());
        checkbox_EnvironmentalScore.setText("Environmental Score Metrics");
        checkbox_EnvironmentalScore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkbox_EnvironmentalScoreActionPerformed(evt);
            }
        });

        jLabel11.setFont(mainPanel.getFont_secondTitle());
        jLabel11.setText("Collateral Damage Potential (CDP)");

        combobox_env_CollateralDamage.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Not Defined (CDP:ND)", "None (CDP:N)", "Low (light loss) (CDP:L)", "Low-Medium (CDP:LM)", "Medium-High (CDP:MH)", "High (catastrophic loss) (CDP:H)" }));
        combobox_env_CollateralDamage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_env_CollateralDamageActionPerformed(evt);
            }
        });

        jLabel13.setFont(mainPanel.getFont_secondTitle());
        jLabel13.setText(" Target Distribution (TD)");

        combobox_env_TargetDistribution.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Not Defined (TD:ND)", "None [0%] (TD:N)", "Low [0-25%] (TD:L)", "Medium [26-75%] (TD:M)", "High [76-100%] (TD:H)" }));
        combobox_env_TargetDistribution.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_env_TargetDistributionActionPerformed(evt);
            }
        });

        combobox_env_IntegrityRequirement.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Not Defined (IR:ND)", "Low (IR:L)", "Medium (IR:M)", "High (IR:H)" }));
        combobox_env_IntegrityRequirement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_env_IntegrityRequirementActionPerformed(evt);
            }
        });

        jLabel14.setFont(mainPanel.getFont_secondTitle());
        jLabel14.setText("Integrity Requirement (IR)");

        jLabel15.setFont(mainPanel.getFont_secondTitle());
        jLabel15.setText("Avail. Requirement (AR)");

        combobox_env_AvailabilityRequirement.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Not Defined (AR:ND)", "Low (AR:L)", "Medium (AR:M)", "High (AR:H)" }));
        combobox_env_AvailabilityRequirement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_env_AvailabilityRequirementActionPerformed(evt);
            }
        });

        jLabel16.setFont(mainPanel.getFont_secondTitle());
        jLabel16.setText("Conf. Requirement (CR)");

        combobox_env_ConfidentialityRequirement.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Not Defined (CR:ND)", "Low (CR:L)", "Medium (CR:M)", "High (CR:H)" }));
        combobox_env_ConfidentialityRequirement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_env_ConfidentialityRequirementActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout EnvironmentalPanelLayout = new javax.swing.GroupLayout(EnvironmentalPanel);
        EnvironmentalPanel.setLayout(EnvironmentalPanelLayout);
        EnvironmentalPanelLayout.setHorizontalGroup(
            EnvironmentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EnvironmentalPanelLayout.createSequentialGroup()
                .addGroup(EnvironmentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combobox_env_CollateralDamage, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(EnvironmentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(EnvironmentalPanelLayout.createSequentialGroup()
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addComponent(combobox_env_TargetDistribution, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(EnvironmentalPanelLayout.createSequentialGroup()
                .addGroup(EnvironmentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(combobox_env_ConfidentialityRequirement, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(EnvironmentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(combobox_env_IntegrityRequirement, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(EnvironmentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(combobox_env_AvailabilityRequirement, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        EnvironmentalPanelLayout.setVerticalGroup(
            EnvironmentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EnvironmentalPanelLayout.createSequentialGroup()
                .addGroup(EnvironmentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel13))
                .addGap(0, 0, 0)
                .addGroup(EnvironmentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combobox_env_CollateralDamage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combobox_env_TargetDistribution, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(EnvironmentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(EnvironmentalPanelLayout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combobox_env_AvailabilityRequirement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(EnvironmentalPanelLayout.createSequentialGroup()
                        .addGroup(EnvironmentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(jLabel14))
                        .addGap(0, 0, 0)
                        .addGroup(EnvironmentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(combobox_env_ConfidentialityRequirement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(combobox_env_IntegrityRequirement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
        );

        copyButton.setText("Copy");
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });

        nvdSiteButton.setText("Visit NVD site");
        nvdSiteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nvdSiteButtonActionPerformed(evt);
            }
        });

        jScrollPane7.setBorder(null);
        jScrollPane7.setFont(mainPanel.getFont_table());

        envScoreTable.setFont(mainPanel.getFont_table());
        envScoreTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "Environmental", "Modified Impact"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(envScoreTable);

        jLabel12.setFont(mainPanel.getFont_secondTitleBold());
        jLabel12.setText("Scores");

        nvdSiteButton1.setText("Reset");
        nvdSiteButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nvdSiteButton1ActionPerformed(evt);
            }
        });

        jScrollPane5.setBorder(null);
        jScrollPane5.setFont(mainPanel.getFont_table());

        baseScoreTable.setFont(mainPanel.getFont_table());
        baseScoreTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "Base", "Impact", "Exploitability"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(baseScoreTable);

        jLabel17.setFont(mainPanel.getFont_secondTitleBold());
        jLabel17.setText("Base Scores");

        jLabel18.setFont(mainPanel.getFont_secondTitleBold());
        jLabel18.setText("Vector:");

        jLabel30.setFont(mainPanel.getFont_secondTitleBold());
        jLabel30.setText("Environmental Scores");

        Vector_textField.setEditable(false);
        Vector_textField.setFont(mainPanel.getFont_vector());

        jScrollPane4.setBorder(null);
        jScrollPane4.setFont(mainPanel.getFont_table());

        scoreTable.setFont(mainPanel.getFont_table());
        scoreTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", "", "", ""}
            },
            new String [] {
                "Base", "Temporal", "Environmental", "Overall"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(scoreTable);

        javax.swing.GroupLayout scorePanelLayout = new javax.swing.GroupLayout(scorePanel);
        scorePanel.setLayout(scorePanelLayout);
        scorePanelLayout.setHorizontalGroup(
            scorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scorePanelLayout.createSequentialGroup()
                .addComponent(jLabel12)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane4)
            .addGroup(scorePanelLayout.createSequentialGroup()
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Vector_textField))
            .addGroup(scorePanelLayout.createSequentialGroup()
                .addComponent(copyButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nvdSiteButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nvdSiteButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(scorePanelLayout.createSequentialGroup()
                .addGroup(scorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(scorePanelLayout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(scorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel30)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        scorePanelLayout.setVerticalGroup(
            scorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scorePanelLayout.createSequentialGroup()
                .addComponent(jLabel12)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(scorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel17)
                    .addComponent(jLabel30))
                .addGap(0, 0, 0)
                .addGroup(scorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(scorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(Vector_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(scorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(copyButton)
                    .addComponent(nvdSiteButton)
                    .addComponent(nvdSiteButton1)))
        );

        javax.swing.GroupLayout CVSS2_PanelLayout = new javax.swing.GroupLayout(CVSS2_Panel);
        CVSS2_Panel.setLayout(CVSS2_PanelLayout);
        CVSS2_PanelLayout.setHorizontalGroup(
            CVSS2_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CVSS2_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CVSS2_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(EnvironmentalPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BasePanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(checkbox_baseScore, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkbox_TemporalScore, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkbox_EnvironmentalScore, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TemporalPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scorePanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        CVSS2_PanelLayout.setVerticalGroup(
            CVSS2_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CVSS2_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(checkbox_baseScore)
                .addGap(0, 0, 0)
                .addComponent(BasePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkbox_TemporalScore)
                .addGap(0, 0, 0)
                .addComponent(TemporalPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(checkbox_EnvironmentalScore)
                .addGap(0, 0, 0)
                .addComponent(EnvironmentalPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scorePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(CVSS2_Panel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void combobox_env_ConfidentialityRequirementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_env_ConfidentialityRequirementActionPerformed
        updateScores();
    }//GEN-LAST:event_combobox_env_ConfidentialityRequirementActionPerformed

    private void combobox_env_AvailabilityRequirementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_env_AvailabilityRequirementActionPerformed
        updateScores();
    }//GEN-LAST:event_combobox_env_AvailabilityRequirementActionPerformed

    private void combobox_env_IntegrityRequirementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_env_IntegrityRequirementActionPerformed
        updateScores();
    }//GEN-LAST:event_combobox_env_IntegrityRequirementActionPerformed

    private void combobox_env_TargetDistributionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_env_TargetDistributionActionPerformed
        updateScores();
    }//GEN-LAST:event_combobox_env_TargetDistributionActionPerformed

    private void combobox_env_CollateralDamageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_env_CollateralDamageActionPerformed
        updateScores();
    }//GEN-LAST:event_combobox_env_CollateralDamageActionPerformed

    private void checkbox_EnvironmentalScoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkbox_EnvironmentalScoreActionPerformed
        EnvironmentalPanel.setVisible(checkbox_EnvironmentalScore.isSelected());
    }//GEN-LAST:event_checkbox_EnvironmentalScoreActionPerformed

    private void combobox_temporal_reportConfidenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_temporal_reportConfidenceActionPerformed
        updateScores();
    }//GEN-LAST:event_combobox_temporal_reportConfidenceActionPerformed

    private void combobox_temporal_remediationLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_temporal_remediationLevelActionPerformed
        updateScores();
    }//GEN-LAST:event_combobox_temporal_remediationLevelActionPerformed

    private void combobox_temporal_exploitabilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_temporal_exploitabilityActionPerformed
        updateScores();
    }//GEN-LAST:event_combobox_temporal_exploitabilityActionPerformed

    private void checkbox_TemporalScoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkbox_TemporalScoreActionPerformed
        TemporalPanel.setVisible(checkbox_TemporalScore.isSelected());
    }//GEN-LAST:event_checkbox_TemporalScoreActionPerformed

    private void combobox_base_confImpactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_base_confImpactActionPerformed
        updateScores();
    }//GEN-LAST:event_combobox_base_confImpactActionPerformed

    private void combobox_base_availabilityImpactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_base_availabilityImpactActionPerformed
        updateScores();
    }//GEN-LAST:event_combobox_base_availabilityImpactActionPerformed

    private void combobox_base_integrityImpactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_base_integrityImpactActionPerformed
        updateScores();
    }//GEN-LAST:event_combobox_base_integrityImpactActionPerformed

    private void combobox_base_AuthenticationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_base_AuthenticationActionPerformed
        updateScores();
    }//GEN-LAST:event_combobox_base_AuthenticationActionPerformed

    private void combobox_base_accessComplexityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_base_accessComplexityActionPerformed
        updateScores();
    }//GEN-LAST:event_combobox_base_accessComplexityActionPerformed

    private void combobox_base_accessVectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_base_accessVectorActionPerformed
        updateScores();
    }//GEN-LAST:event_combobox_base_accessVectorActionPerformed

    private void checkbox_baseScoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkbox_baseScoreActionPerformed
        BasePanel.setVisible(checkbox_baseScore.isSelected());
    }//GEN-LAST:event_checkbox_baseScoreActionPerformed

    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed
        StringSelection selection = new StringSelection(Vector_textField.getText().toString());
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(selection, selection);
    }//GEN-LAST:event_copyButtonActionPerformed

    private void nvdSiteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nvdSiteButtonActionPerformed
        if (Desktop.isDesktopSupported()) {
            try {
                URI uri = new URI("https://nvd.nist.gov/cvss.cfm?calculator&version=2&vector="+Vector_textField.getText().toString());
                Desktop.getDesktop().browse(uri);
            } catch (IOException e) { /* TODO: error handling */ } catch (URISyntaxException ex) {
                BurpExtender.output.println("Error opening URI");
            }
        } else {
            BurpExtender.output.println("Desktop is not Supported");
        }
    }//GEN-LAST:event_nvdSiteButtonActionPerformed

    private void nvdSiteButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nvdSiteButton1ActionPerformed
        resetPanel();
    }//GEN-LAST:event_nvdSiteButton1ActionPerformed


    private double calculateBaseScore(){
        double impact = 10.41 * (1 - (1 - getBaseConfImpact()) * (1 - getBaseIntegImpact()) * (1 - getBaseAvailImpact()));
        double exploitability = 20 * getBaseAccessComplexity() * getBaseAuthentication() * getBaseAccessVector();
        double baseScore = calculateBaseScore(impact, exploitability);
        return baseScore;
    }
    
    private String calculateBaseScore_Formated(){
        double impact = 10.41 * (1 - (1 - getBaseConfImpact()) * (1 - getBaseIntegImpact()) * (1 - getBaseAvailImpact()));
        double exploitability = calculateBaseExploitability();
        double baseScore = calculateBaseScore(impact, exploitability);
        return decimalFormat(baseScore);
    }
    
    private String[] calculateBaseScore_Array(){
        String[]baseScoreArray=new String[3];
        double impact = 10.41 * (1 - (1 - getBaseConfImpact()) * (1 - getBaseIntegImpact()) * (1 - getBaseAvailImpact()));
        double exploitability = calculateBaseExploitability();
        double baseScore = calculateBaseScore(impact, exploitability);
        baseScoreArray[0]=decimalFormat(baseScore);
        baseScoreArray[1]=decimalFormat(impact);
        baseScoreArray[2]=decimalFormat(exploitability);
        return baseScoreArray;
    }
    
    private double calculateTemporalScore(){
        double tempScore=calculateBaseScore()*getTempExploitability()*getTempRemediationLevel()*getTempReportConfidence();
        return tempScore;
    }
    
    private String calculateTemporalScore_Formatted(){
        double tempScore=calculateBaseScore()*getTempExploitability()*getTempRemediationLevel()*getTempReportConfidence();
        return decimalFormat(tempScore);
    }
    
    private double calculateEnvironmentalScore(){
        double adjustedImpact=10.41*(1-(1-getBaseConfImpact()*getEnviron_ConfReq())*(1-getBaseIntegImpact()*getEnviron_IntelReq())*(1-getBaseAvailImpact()*getEnviron_availReq()));
        adjustedImpact=Math.min(adjustedImpact, 10);
        double adjustedBase=calculateBaseScore(adjustedImpact, calculateBaseExploitability());
        double adjustedTemporal=adjustedBase*getTempExploitability()*getTempRemediationLevel()*getTempReportConfidence();
        double envScore=(adjustedTemporal+(10-adjustedTemporal)*getEnviron_DamagePotential())*getEnviron_TargetDistribution();
        return envScore;
    }
    
    private String calculateEnvironmentalScore_Formatted(){
        double adjustedImpact=10.41*(1-(1-getBaseConfImpact()*getEnviron_ConfReq())*(1-getBaseIntegImpact()*getEnviron_IntelReq())*(1-getBaseAvailImpact()*getEnviron_availReq()));
        adjustedImpact=Math.min(adjustedImpact, 10);
        double adjustedBase=calculateBaseScore(adjustedImpact, calculateBaseExploitability());
        double adjustedTemporal=adjustedBase*getTempExploitability()*getTempRemediationLevel()*getTempReportConfidence();
        double envScore=(adjustedTemporal+(10-adjustedTemporal)*getEnviron_DamagePotential())*getEnviron_TargetDistribution();
        return decimalFormat(envScore);
    }
    
    private String[] calculateEnvironmentalScore_Array(){
        String[]envScoreArray=new String[2];
        double adjustedImpact=10.41*(1-(1-getBaseConfImpact()*getEnviron_ConfReq())*(1-getBaseIntegImpact()*getEnviron_IntelReq())*(1-getBaseAvailImpact()*getEnviron_availReq()));
        adjustedImpact=Math.min(adjustedImpact, 10);
        double adjustedBase=calculateBaseScore(adjustedImpact, calculateBaseExploitability());
        double adjustedTemporal=adjustedBase*getTempExploitability()*getTempRemediationLevel()*getTempReportConfidence();
        double envScore=(adjustedTemporal+(10-adjustedTemporal)*getEnviron_DamagePotential())*getEnviron_TargetDistribution();
        envScoreArray[0]=decimalFormat(envScore);
        envScoreArray[1]=decimalFormat(adjustedImpact);
        return envScoreArray;
    }
    
    private double f(double impact){
        if(impact==0) return 0;
        else return 1.176;
    }
    
    private double calculateBaseExploitability(){
        return 20 * getBaseAccessComplexity() * getBaseAuthentication() * getBaseAccessVector();
    }
    
    private double calculateBaseScore(double impact,double exploitability){
        return Math.abs(.6*impact +.4*exploitability-1.5)*f(impact);
    }
    
    private double getBaseAccessVector(){
        int index=combobox_base_accessVector.getSelectedIndex();
        switch(index){
            case 0:
                return 0.395;   //Requires local access
            case 1:
                return 0.646;   //Local Network accessible
            case 2:
                return 1;       //Network accessible
        }
        return -1;
    }
    
    private double getBaseAccessComplexity(){
        int index=combobox_base_accessComplexity.getSelectedIndex();
        switch(index){
            case 0:     //High
                return 0.35;
            case 1:     //Medium
                return 0.61;
            case 2:     //Low
                return 0.71;
        }
        return -1;
    }
    private double getBaseAuthentication(){
        int index=combobox_base_Authentication.getSelectedIndex();
        switch(index){
            case 0:
                return 0.45;    //Requires multiple instances of authentication
            case 1:
                return 0.56;    //Requires single instance of authentication:
            case 2:
                return 0.704;   // Requires no authentication
        }
        return -1;
    }
    
    private double getBaseConfImpact(){
        int index=combobox_base_confImpact.getSelectedIndex();
        switch(index){
            case 0:             //None
                return 0;
            case 1:             //Partial
                return 0.275;
            case 2:             //Complete
                return 0.660;
        }
        return -1;
    }
    
    private double getBaseIntegImpact(){
        int index=combobox_base_integrityImpact.getSelectedIndex();
        switch(index){
            case 0:             //None
                return 0;
            case 1:             //Partial
                return 0.275;
            case 2:             //Complete
                return 0.660;
        }
        return -1;
    }
    
    private double getBaseAvailImpact(){
        int index=combobox_base_availabilityImpact.getSelectedIndex();
        switch(index){
            case 0:             //None
                return 0;
            case 1:             //Partial
                return 0.275;
            case 2:             //Complete
                return 0.660;
        }
        return -1;
    }
    
    private double getTempExploitability() {
        int index=combobox_temporal_exploitability.getSelectedIndex();
        switch(index){
            case 0:         //Not Defined (E:ND)
                return 1;  
            case 1:         //Unproven that exploit exists (E:U)         
                return 0.85;
            case 2:         //Proof of concept code (E:POC)
                return 0.9;
            case 3:         //Functional exploit exists (E:F)
                return 0.95;
            case 4:         //High (E:H)
                return 1;
        }
        return -1;
    }

    private double getTempRemediationLevel() {
        int index=combobox_temporal_remediationLevel.getSelectedIndex();
        switch(index){
            case 0: //Not Defined (RL:ND)
                return 1;
            case 1:    //Official fix (RL:OF)
                return 0.87;
            case 2: //Temporary fix (RL:TF)
                return 0.9;
            case 3:  //Workaround (RL:W)
                return 0.95;
            case 4: //Unavailable (RL:U)
                return 1;
        }
        return -1;
    }
    
    private double getTempReportConfidence() {
        int index=combobox_temporal_reportConfidence.getSelectedIndex();
        switch(index){
            case 0: //Not Defined (RC:ND)
                return 1;
            case 1: //Unconfirmed (RC:UC)
                return 0.9;
            case 2:  //Uncorroborated (RC:UR)
                return 0.95;
            case 3:   //Confirmed (RC:C)
                return 1;
        }
        return -1;
    }
    
    private double getEnviron_TargetDistribution() {
        int index=combobox_env_TargetDistribution.getSelectedIndex();
        switch(index){
            case 0: //Not Defined (TD:ND)
                return 1;
            case 1:    //None [0%] (TD:N)
                return 0;
            case 2: //Low [0-25%] (TD:L)
                return 0.25;    
            case 3:  //Medium [26-75%] (TD:M)
                return 0.75;
            case 4:    //High [76-100%] (TD:H)
                return 1;    
        }
        return -1;
    }
    private double getEnviron_DamagePotential() {
        int index=combobox_env_CollateralDamage.getSelectedIndex();
        switch(index){
            case 0: //Not Defined (CDP:ND)
                return 0;
            case 1:    //None (CDP:N)
                return 0;
            case 2: //Low (light loss) (CDP:L)
                return 0.1;    
            case 3:  //Low-Medium (CDP:LM)
                return 0.3;
            case 4: //Medium-High (CDP:MH)
                return 0.4;    
            case 5:    //High (catastrophic loss) (CDP:H)
                return 0.5;
        }
        return -1;
    }
    
    private double getEnviron_ConfReq() {
        int index=combobox_env_ConfidentialityRequirement.getSelectedIndex();
        switch(index){
            case 0: //Not Defined (CR:ND)
                return 1;
            case 1: //Low (CR:L)
                return 0.5;
            case 2:  //Medium (CR:M)
                return 1;
            case 3:    //High (CR:H)
                return 1.51;
        }
        return -1;
    }
    
    private double getEnviron_IntelReq() {
        int index=combobox_env_IntegrityRequirement.getSelectedIndex();
        switch(index){
            case 0: //Not Defined (IR:ND)
                return 1;
            case 1: //Low (IR:L)
                return 0.5;
            case 2:  //Medium (IR:M)
                return 1;
            case 3:    //High (IR:H)
                return 1.51;
        }
        return -1;
    }
    
    private double getEnviron_availReq() {
        int index=combobox_env_AvailabilityRequirement.getSelectedIndex();
        switch(index){
            case 0: //Not Defined (AR:ND)
                return 1;
            case 1: //Low (AR:L)
                return 0.5;
            case 2:  //Medium (AR:M)
                return 1;
            case 3:    //High (AR:H)
                return 1.51;
        }
        return -1;
    }

    private void makeInvisible() {
        TemporalPanel.setVisible(false);
        EnvironmentalPanel.setVisible(false);
    }
    
    private String decimalFormat(double score){
        String pattern = "0.0";
        DecimalFormat df = new DecimalFormat(pattern);
        return df.format(score);
    }

    private void updateScores() {
        updateBasecore();
        updateTemporalScore();
        updateEnvironmentalScore();
        updateOveralScore();
        updateCVSS2_Vector();
    }
    private void updateBasecore() {
        String score=calculateBaseScore_Formated();
        scoreTable.setValueAt(score, 0, 0);
        String[]arr=calculateBaseScore_Array();
        baseScoreTable.setValueAt(arr[0], 0, 0);
        baseScoreTable.setValueAt(arr[1], 0, 1);
        baseScoreTable.setValueAt(arr[2], 0, 2);
    }
    private void updateTemporalScore() {
        String score=calculateTemporalScore_Formatted();
        scoreTable.setValueAt(score, 0, 1);
    }

    private void updateOveralScore() {
        String overalScore="0.0";
        if(calculateEnvironmentalScore()==0){
            if(calculateTemporalScore()==0){
                scoreTable.setValueAt(calculateBaseScore_Formated(), 0, 3);
            }
            else{
                scoreTable.setValueAt(calculateTemporalScore_Formatted(), 0, 3);
            }
        }
        else{
            scoreTable.setValueAt(calculateEnvironmentalScore_Formatted(), 0, 3);
        }
    }
    
    private void updateSeverities() {
        for (int i=0;i<scoreTable.getColumnCount();i++){
            String str=scoreTable.getValueAt(0, i).toString();
            if(str.length()>0){
                double score=removeSeverityFromScore(str);
                str=addSeverityToScore(score);
                scoreTable.setValueAt(str, 0, i);
            }
        }
    }
    
    private String addSeverityToScore(double score) {
        if(score>=9){
            return score+" (Critical)";
        }
        else if(score>=7){
            return score+" (High)";
        }
        else if(score>=4){
            return score+" (Medium)";
        }
        else if(score>=0.1){
            return score+" (Low)";
        }
        else{
            return score+"";
        }
    }
    
    private void updateCVSS2_Vector() {
        Vector_textField.setText(getVector());
    }

    private String getVector() {
        String vector="(";
        vector=vector+getBaseVector();
        vector=vector+getTemporalVector();
        vector=vector+getEnvironmentalVector();
        vector+=")";
        return vector;
    }
    
    private void updateEnvironmentalScore() {
        String score=calculateEnvironmentalScore_Formatted();
        scoreTable.setValueAt(score, 0, 2);
        String[]arr=calculateEnvironmentalScore_Array();
        envScoreTable.setValueAt(arr[0], 0, 0);
        envScoreTable.setValueAt(arr[1], 0, 1);
    }

    private String getBaseVector() {
        String baseVector="";
        baseVector+=getSubVector(combobox_base_accessVector)+"/";
        baseVector+=getSubVector(combobox_base_accessComplexity)+"/";
        baseVector+=getSubVector(combobox_base_Authentication)+"/";
        baseVector+=getSubVector(combobox_base_confImpact)+"/";
        baseVector+=getSubVector(combobox_base_integrityImpact)+"/";
        baseVector+=getSubVector(combobox_base_availabilityImpact);
        return baseVector;
    }

    private String getSubVector(JComboBox<String> combobox) {
        String text=combobox.getSelectedItem().toString();
        return text.substring(text.indexOf("(")+1, text.indexOf(")"));
    }

    private String getTemporalVector() {
        String vector="";
        if(combobox_temporal_exploitability.getSelectedIndex()==0&&combobox_temporal_remediationLevel.getSelectedIndex()==0&&combobox_temporal_reportConfidence.getSelectedIndex()==0){
            //do nothing
        }
        else{
            vector+="/"+getSubVector(combobox_temporal_exploitability)+"/";
            vector+=getSubVector(combobox_temporal_remediationLevel)+"/";
            vector+=getSubVector(combobox_temporal_reportConfidence);
        }
        return vector;
    }
    
    private String getEnvironmentalVector() {
        String vector="";
        if(combobox_env_CollateralDamage.getSelectedIndex()==0&&combobox_env_TargetDistribution.getSelectedIndex()==0&&combobox_env_ConfidentialityRequirement.getSelectedIndex()==0
                &&combobox_env_IntegrityRequirement.getSelectedIndex()==0&&combobox_env_AvailabilityRequirement.getSelectedIndex()==0){
            //do nothing
        }
        else{
            vector+="/"+getSubVector(combobox_env_CollateralDamage)+"/";
            vector+=getSubVector(combobox_env_TargetDistribution)+"/";
            vector+=getSubVector(combobox_env_ConfidentialityRequirement)+"/";
            vector+=getSubVector(combobox_env_IntegrityRequirement)+"/";
            vector+=getSubVector(combobox_env_AvailabilityRequirement);
        }
        return vector;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BasePanel;
    private javax.swing.JPanel CVSS2_Panel;
    private javax.swing.JPanel EnvironmentalPanel;
    private javax.swing.JPanel TemporalPanel;
    private javax.swing.JTextField Vector_textField;
    private javax.swing.JTable baseScoreTable;
    private javax.swing.JCheckBox checkbox_EnvironmentalScore;
    private javax.swing.JCheckBox checkbox_TemporalScore;
    private javax.swing.JCheckBox checkbox_baseScore;
    private javax.swing.JComboBox<String> combobox_base_Authentication;
    private javax.swing.JComboBox<String> combobox_base_accessComplexity;
    private javax.swing.JComboBox<String> combobox_base_accessVector;
    private javax.swing.JComboBox<String> combobox_base_availabilityImpact;
    private javax.swing.JComboBox<String> combobox_base_confImpact;
    private javax.swing.JComboBox<String> combobox_base_integrityImpact;
    private javax.swing.JComboBox<String> combobox_env_AvailabilityRequirement;
    private javax.swing.JComboBox<String> combobox_env_CollateralDamage;
    private javax.swing.JComboBox<String> combobox_env_ConfidentialityRequirement;
    private javax.swing.JComboBox<String> combobox_env_IntegrityRequirement;
    private javax.swing.JComboBox<String> combobox_env_TargetDistribution;
    private javax.swing.JComboBox<String> combobox_temporal_exploitability;
    private javax.swing.JComboBox<String> combobox_temporal_remediationLevel;
    private javax.swing.JComboBox<String> combobox_temporal_reportConfidence;
    private javax.swing.JButton copyButton;
    private javax.swing.JTable envScoreTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JButton nvdSiteButton;
    private javax.swing.JButton nvdSiteButton1;
    private javax.swing.JPanel scorePanel;
    private javax.swing.JTable scoreTable;
    // End of variables declaration//GEN-END:variables

    private Color getColor(Double score) {
        if (score >= 9) {  //Critical (175,0,0) -> (90,0,0), Dif=175-90=85, dif [9,10]=1
            return new Color ((int) (175-(score-9)*85),0,0);
        } else if (score >= 7) {    //High (255,0,0) -> (200,0,0), Dif=255-200=55, dif [7,9)=2
            return new Color ((int) (255-((score-7)/2)*55),0,0);
        } else if (score >= 4) {    //Medium (255,200,0) -> (255,90,0), Dif=170-90=110, dif [4,7)=3
            return new Color (255,(int) (200-((score-4)/3)*110),0);
        } else if (score >= 0.1) {  //Low (255,255,120) -> (255,255,0), Dif=170-90=120, dif [0,4)=4
            return new Color (255,255,(int) (120-((score-0)/4)*120));
        } else {    //None
            return Color.WHITE;
        }
    }
    
    private Double removeSeverityFromScore(String score) {
        if(score.startsWith("10")){
            return Double.parseDouble(score.substring(0, 4));
        }
        else{
            return Double.parseDouble(score.substring(0, 3));
        }
    }
    
    private void clearTables() {
        clearTable(scoreTable);
        clearTable(baseScoreTable);
        clearTable(envScoreTable);
    }

    private void clearTable(JTable table) {
        for (int i = 0; i < table.getColumnCount(); i++) {
            table.setValueAt("", 0, i);
        }
    }

    private void resetPanel() {
        resetCheckboxes();
        clearTables();
        Vector_textField.setText("");
    }

    private void resetCheckboxes() {
        combobox_base_accessVector.setSelectedIndex(2); //Network
        combobox_base_accessComplexity.setSelectedIndex(2); //Low
        combobox_base_Authentication.setSelectedIndex(2);   //None
        combobox_base_confImpact.setSelectedIndex(0);
        combobox_base_integrityImpact.setSelectedIndex(0);
        combobox_base_availabilityImpact.setSelectedIndex(0);
        combobox_temporal_exploitability.setSelectedIndex(0);
        combobox_temporal_remediationLevel.setSelectedIndex(0);
        combobox_temporal_reportConfidence.setSelectedIndex(0);
        combobox_env_CollateralDamage.setSelectedIndex(0);
        combobox_env_TargetDistribution.setSelectedIndex(0);
        combobox_env_ConfidentialityRequirement.setSelectedIndex(0);
        combobox_env_IntegrityRequirement.setSelectedIndex(0);
        combobox_env_AvailabilityRequirement.setSelectedIndex(0);
    }

}
